using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Data;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using Microsoft.Win32;
using System.Data.SqlClient;
using System.IO;
using System.Globalization;

namespace _46
{
    public partial class Dealer : Window
    {
        string connectionStr = null;
        SqlConnection connection = null;
        SqlCommand command = null;
        SqlDataAdapter adapter = null;
        DataTable dt, ft;
        public Dealer()
        {
            InitializeComponent();
            connectionStr = "Data Source = DMYTRO; Initial Catalog = Cursova; Integrated Security = True";
            Serial.Content = $"{Temporary.serial} - ваш серійний номер";
            updateSelling();
            updateAlready();
        }
        private void ExitClick(object sender, RoutedEventArgs e)
        {
            MainWindow mw = new MainWindow();
            Hide();
            mw.Show();
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            System.Windows.Application.Current.Shutdown();
        }
        byte[] image;
        private void DialogClick(object sender, RoutedEventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "pngs (*.png)|*.png|jpgs (*.jpg or *.jpeg)|*.jpg;*.jpeg";
            if (dialog.ShowDialog() == true)
            {
                image = File.ReadAllBytes(dialog.FileName);
                ImageSave.Source = GetImageFromByteArray(image);
            }
        }
        public static BitmapFrame GetImageFromByteArray(byte[] array)
        {
            return GetImageFromMemoryStream(new MemoryStream(array));
        }
        public static BitmapFrame GetImageFromMemoryStream(MemoryStream memoryStream)
        {
            return BitmapFrame.Create(memoryStream, BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.OnLoad);
        }
        public void updateSelling()
        {
            Selling.Columns.Clear();
            connection = new SqlConnection(connectionStr);
            connection.Open();

            string strQ = $"SELECT dbo.Car.Photo as Фото, dbo.Car.Model as Модель, dbo.Car.Run as Пробіг, dbo.Car.Price as Ціна, dbo.Car.Date as Дата FROM dbo.Car WHERE (dbo.Car.Status = 1) AND (dbo.Car.IDDealer = {Temporary.serial});";
            adapter = new SqlDataAdapter(strQ, connection);
            dt = new DataTable("Користувачі системи");
            adapter.Fill(dt);
            Selling.AutoGeneratedColumns += (s, e) => 
            {
                Selling.Columns[0] = GetImageColumn("Фото");
                (Selling.Columns[4] as DataGridTextColumn).Binding.StringFormat = "dd.MM.yyyy";
            };
            Selling.ItemsSource = dt.DefaultView;

            connection.Close();
        }
        public DataGridTemplateColumn GetImageColumn(string columnName)
        {
            FrameworkElementFactory image = new FrameworkElementFactory(typeof(Image));
            DataTemplate cellTemplate = new DataTemplate();
            cellTemplate.VisualTree = image;
            Binding binding = new Binding(columnName) { Converter = new Dealer.ImageConvertor() };
            image.SetValue(Image.SourceProperty, binding);
            DataGridTemplateColumn templateColumn = new DataGridTemplateColumn();
            templateColumn.Header = columnName;
            templateColumn.CellTemplate = cellTemplate;
            templateColumn.Width = 150;

            return templateColumn;
        }
        public class ImageConvertor : IValueConverter
        {
            public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
            {
                if (value.GetType() == typeof(System.DBNull))
                    return null;
                return Temporary.GetImageFromByteArray((byte[])value);
            }

            public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
            {
                throw new NotImplementedException();
            }
        }
        private void updateAlready()
        {
            connection = new SqlConnection(connectionStr);
            connection.Open();

            string strQ = "SELECT dbo.Clients.Surname as Прізвище, dbo.Clients.Name as [Ім'я], dbo.Car.Model as Модель, dbo.Car.Price as Ціна, dbo.Contract.Date as Дата " +
                $"FROM dbo.Contract INNER JOIN dbo.Clients ON dbo.Contract.IDClient = dbo.Clients.IDClient INNER JOIN dbo.Car ON dbo.Contract.IDCar = dbo.Car.IDCar WHERE dbo.Contract.IDDealer = {Temporary.serial};";
            adapter = new SqlDataAdapter(strQ, connection);
            ft = new DataTable("Користувачі системи");
            adapter.Fill(ft);
            Already.AutoGeneratedColumns += (s, e) =>
            {
                (Already.Columns[4] as DataGridTextColumn).Binding.StringFormat = "dd.MM.yyyy";
            };
            Already.ItemsSource = ft.DefaultView;

            connection.Close();
        }
        private void NewAuto_Click(object sender, RoutedEventArgs e)
        {
            if (Equals(NewModel.Text, "") || Equals(NewRun.Text, "") || Equals(NewPrice.Text, "") || ImageSave.Source == null)
            {
                MessageBox.Show("Заповніть усі обов'язкові поля");
                return;
            }
            if (DateCorrection(DateP))
            {
                MessageBox.Show("Заповніть дату коректно (Масимальний можливий час використання 10 років)");
                return;
            }
            if (int.Parse(NewRun.Text) >= 200000)
            {
                MessageBox.Show("Масимальний можливий пробіг 199999 км");
                return;
            }

            connection = new SqlConnection(connectionStr);
            connection.Open();

            NewSum.Content = Math.Round(double.Parse(NewPrice.Text) * 0.05, 2);
            string strQ = $"INSERT INTO Car values('{NewModel.Text}', @image, '{DateP.SelectedDate}', {NewRun.Text}, {NewSum.Content}, {NewPrice.Text}, {Temporary.serial}, 1);";
            command = new SqlCommand(strQ, connection);
            command.Parameters.AddWithValue("@image", image);
            command.ExecuteNonQuery();

            NewModel.Text = NewRun.Text = NewPrice.Text = "";
            NewSum.Content = "";
            DateP.SelectedDate = null;
            ImageSave.Source = null;
            updateSelling();
            MessageBox.Show($"Ви додали автомобіль");

            connection.Close();
        }
        private void Serial_Click(object sender, RoutedEventArgs e)
        {
            DealerData dd = new DealerData();
            dd.ShowDialog();
        }
        private void NewRun_KeyUp(object sender, KeyEventArgs e) {NewRun.Text = NumberCorrection(NewRun.Text); }
        private void NewPrice_KeyUp(object sender, KeyEventArgs e) 
        { 
            NewPrice.Text = NumberCorrection(NewPrice.Text);
            if (NewPrice.Text != "")
                NewSum.Content = Math.Round(double.Parse(NewPrice.Text) * 0.05, 2);
        }
        static public string NumberCorrection(string str)
        {
            string temp = "";
            for (int i = 0; i < str.Length; i++)
                if (Char.IsNumber(str[i]))
                    temp += str[i];
            return temp;
        }
        static public bool DateCorrection(DatePicker DateP)
        {
            string[] all = DateP.SelectedDate.ToString().Split(' ');
            if (all.Length != 3)
                return true;
            string[] date = all[0].Split('/');
            if (all.Length != 3)
                return true;

            DateTime check;
            try
            {
                check = new DateTime(int.Parse(date[2]), int.Parse(date[0]), int.Parse(date[1]));
            }
            catch
            {
                return true;
            }

            DateTime now = DateTime.Now;
            DateTime min = new DateTime(now.Year - 10, now.Month, now.Day);
            if (DateTime.Compare(min, check) > 0 || DateTime.Compare(check, now) > 0)
                return true;
            
            return false;
        }
    }
}
